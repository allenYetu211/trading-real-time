// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 币种配置表
model CoinConfig {
  id        Int      @id @default(autoincrement())
  symbol    String   @db.VarChar(20)
  interval  String   @db.VarChar(10)
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([symbol, interval])
  @@map("coin_configs")
}

// K线数据表
model KlineData {
  id                      Int      @id @default(autoincrement())
  symbol                  String   @db.VarChar(20)
  interval                String   @db.VarChar(10)
  openTime                BigInt   @map("open_time")
  closeTime               BigInt   @map("close_time")
  openPrice               Decimal  @db.Decimal(30, 8) @map("open_price")
  highPrice               Decimal  @db.Decimal(30, 8) @map("high_price")
  lowPrice                Decimal  @db.Decimal(30, 8) @map("low_price")
  closePrice              Decimal  @db.Decimal(30, 8) @map("close_price")
  volume                  Decimal  @db.Decimal(30, 8)
  quoteAssetVolume        Decimal  @db.Decimal(30, 8) @map("quote_asset_volume")
  numberOfTrades          Int      @map("number_of_trades")
  takerBuyBaseAssetVolume Decimal  @db.Decimal(30, 8) @map("taker_buy_base_asset_volume")
  takerBuyQuoteAssetVolume Decimal @db.Decimal(30, 8) @map("taker_buy_quote_asset_volume")
  createdAt               DateTime @default(now()) @map("created_at")

  @@unique([symbol, interval, openTime])
  @@index([symbol, interval, openTime])
  @@map("kline_data")
}

// 分析结果表
model AnalysisResult {
  id                Int      @id @default(autoincrement())
  symbol            String   @db.VarChar(20)
  interval          String   @db.VarChar(10)
  timestamp         BigInt
  trendScore        Decimal  @db.Decimal(5, 2) @map("trend_score")
  momentumScore     Decimal  @db.Decimal(5, 2) @map("momentum_score")
  volatilityScore   Decimal  @db.Decimal(5, 2) @map("volatility_score")
  signal            String   @db.VarChar(20)
  confidence        Decimal  @db.Decimal(5, 2)
  patterns          String?  @db.Text
  supportResistance String?  @db.Text @map("support_resistance")
  summary           String?  @db.Text
  createdAt         DateTime @default(now()) @map("created_at")

  @@index([symbol, interval, timestamp])
  @@map("analysis_results")
}

// 策略信号表
model StrategySignal {
  id             Int      @id @default(autoincrement())
  symbol         String   @db.VarChar(20)
  interval       String   @db.VarChar(10)
  strategyType   String   @db.VarChar(50) @map("strategy_type")
  signalType     String   @db.VarChar(20) @map("signal_type")
  price          Decimal  @db.Decimal(30, 8)
  confidence     Decimal  @db.Decimal(3, 2)
  recommendation String   @db.Text
  upperLevel     Decimal? @db.Decimal(30, 8) @map("upper_level")
  lowerLevel     Decimal? @db.Decimal(30, 8) @map("lower_level")
  stopLoss       Decimal? @db.Decimal(30, 8) @map("stop_loss")
  takeProfit     Decimal? @db.Decimal(30, 8) @map("take_profit")
  note           String?  @db.Text
  timestamp      BigInt
  createdAt      DateTime @default(now()) @map("created_at")

  @@index([symbol, strategyType, createdAt])
  @@map("strategy_signals")
}

// 策略配置表
model StrategyConfig {
  id               Int      @id @default(autoincrement())
  name             String   @db.VarChar(100)
  type             String   @db.VarChar(50) @map("strategy_type")
  status           String   @db.VarChar(20) @default("INACTIVE")
  symbol           String   @db.VarChar(20)
  interval         String   @db.VarChar(10)
  parameters       String   @db.Text  // JSON字符串存储策略参数
  riskManagement   String   @db.Text  @map("risk_management") // JSON字符串存储风险管理配置
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // 关联的策略信号
  signals          StrategySignalRecord[]
  // 关联的回测结果
  backtests        StrategyBacktest[]

  @@index([symbol, interval, status])
  @@map("strategy_configs")
}

// 策略信号记录表
model StrategySignalRecord {
  id           Int      @id @default(autoincrement())
  strategyId   Int      @map("strategy_id")
  symbol       String   @db.VarChar(20)
  interval     String   @db.VarChar(10)
  signal       String   @db.VarChar(20)
  side         String   @db.VarChar(10)
  price        Decimal  @db.Decimal(30, 8)
  quantity     Decimal? @db.Decimal(30, 8)
  confidence   Decimal  @db.Decimal(5, 2)
  stopLoss     Decimal? @db.Decimal(30, 8) @map("stop_loss")
  takeProfit   Decimal? @db.Decimal(30, 8) @map("take_profit")
  reason       String   @db.Text
  timestamp    BigInt
  executed     Boolean  @default(false)
  executedAt   DateTime? @map("executed_at")
  createdAt    DateTime @default(now()) @map("created_at")

  // 关联策略配置
  strategy     StrategyConfig @relation(fields: [strategyId], references: [id], onDelete: Cascade)

  @@index([strategyId, symbol, interval, timestamp])
  @@index([executed, createdAt])
  @@map("strategy_signal_records")
}

// 策略回测表
model StrategyBacktest {
  id            Int      @id @default(autoincrement())
  strategyId    Int      @map("strategy_id")
  symbol        String   @db.VarChar(20)
  interval      String   @db.VarChar(10)
  startTime     DateTime @map("start_time")
  endTime       DateTime @map("end_time")
  totalTrades   Int      @map("total_trades")
  winningTrades Int      @map("winning_trades")
  losingTrades  Int      @map("losing_trades")
  winRate       Decimal  @db.Decimal(5, 2) @map("win_rate")
  totalReturn   Decimal  @db.Decimal(10, 4) @map("total_return")
  maxDrawdown   Decimal  @db.Decimal(5, 2) @map("max_drawdown")
  sharpeRatio   Decimal  @db.Decimal(8, 4) @map("sharpe_ratio")
  trades        String   @db.Text  // JSON字符串存储交易记录
  summary       String   @db.Text
  createdAt     DateTime @default(now()) @map("created_at")

  // 关联策略配置
  strategy      StrategyConfig @relation(fields: [strategyId], references: [id], onDelete: Cascade)

  @@index([strategyId, symbol, interval])
  @@map("strategy_backtests")
}

// 通知记录表
model NotificationRecord {
  id         Int      @id @default(autoincrement())
  title      String   @db.VarChar(200)
  message    String   @db.Text
  type       String   @db.VarChar(20) // info, success, warning, error
  symbol     String?  @db.VarChar(20)
  interval   String?  @db.VarChar(10)
  signal     String?  @db.VarChar(20)
  confidence Decimal? @db.Decimal(5, 2)
  summary    String?  @db.Text
  patterns   String?  @db.Text
  supportResistance String? @db.Text @map("support_resistance")
  data       String?  @db.Text // JSON格式存储额外数据
  timestamp  DateTime @map("timestamp")
  createdAt  DateTime @default(now()) @map("created_at")

  @@index([type, createdAt])
  @@index([symbol, interval, createdAt])
  @@index([timestamp])
  @@map("notification_records")
}

// 交易记录表
model TradingRecord {
  id                   Int      @id @default(autoincrement())
  tradeId              String   @unique @db.VarChar(100) @map("trade_id") // 唯一交易ID
  
  // 基础信息
  instrument           String   @db.VarChar(20) // 交易对
  direction            String   @db.VarChar(10) // LONG/SHORT
  status               String   @db.VarChar(20) // OPEN/CLOSED
  leverage             Decimal? @db.Decimal(5, 2) // 杠杆
  
  // 时间信息
  entryTime            DateTime? @map("entry_time") // 开仓时间
  exitTime             DateTime? @map("exit_time") // 平仓时间
  duration             Int? // 持仓时长(分钟)
  
  // 价格信息
  plannedPrice         Decimal? @db.Decimal(30, 8) @map("planned_price") // 计划入场价
  actualEntryPrice     Decimal? @db.Decimal(30, 8) @map("actual_entry_price") // 实际开仓均价
  actualExitPrice      Decimal? @db.Decimal(30, 8) @map("actual_exit_price") // 实际平仓均价
  positionSize         Decimal? @db.Decimal(30, 8) @map("position_size") // 头寸规模
  margin               Decimal? @db.Decimal(30, 8) // 保证金(USD)
  
  // 盈亏信息
  pnl                  Decimal? @db.Decimal(30, 8) // 盈亏(USD)
  rorPercentage        Decimal? @db.Decimal(8, 4) @map("ror_percentage") // 盈亏率(%)
  fees                 Decimal? @db.Decimal(30, 8) // 手续费(USD)
  netPnl               Decimal? @db.Decimal(30, 8) @map("net_pnl") // 净盈亏(USD)
  slippage             Decimal? @db.Decimal(30, 8) // 滑点(USD)
  
  // 风控信息
  initialTakeProfit    Decimal? @db.Decimal(30, 8) @map("initial_take_profit") // 初始止盈位
  initialStopLoss      Decimal? @db.Decimal(30, 8) @map("initial_stop_loss") // 初始止损位
  hitTakeProfit        Boolean  @default(false) @map("hit_take_profit") // 是否触及止盈
  hitStopLoss          Boolean  @default(false) @map("hit_stop_loss") // 是否触及止损
  
  // 高级指标
  maxFavorableExcursion    Decimal? @db.Decimal(30, 8) @map("max_favorable_excursion") // 最大有利偏移
  maxAdverseExcursion      Decimal? @db.Decimal(30, 8) @map("max_adverse_excursion") // 最大不利偏移
  
  // 同步状态
  notionSynced         Boolean  @default(false) @map("notion_synced") // 是否已同步到Notion
  notionPageId         String?  @db.VarChar(100) @map("notion_page_id") // Notion页面ID
  syncedAt             DateTime? @map("synced_at") // 同步时间
  
  // 元数据
  okxOrderIds          String?  @db.Text @map("okx_order_ids") // OKX订单ID列表(JSON)
  rawData              String?  @db.Text @map("raw_data") // 原始数据(JSON)
  notes                String?  @db.Text // 备注
  
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  @@index([instrument, status, createdAt])
  @@index([status, notionSynced])
  @@index([entryTime, exitTime])
  @@map("trading_records")
}

// 交易机会表
model TradingOpportunity {
  id                String   @id @default(uuid())
  symbol            String   @db.VarChar(20)
  direction         String   @db.VarChar(10) // 'LONG' | 'SHORT'
  marketState       String   @db.VarChar(20) @map("market_state") // 'UPTREND' | 'DOWNTREND' | 'RANGING'
  riskRewardRatio   Decimal  @db.Decimal(8, 2) @map("risk_reward_ratio")
  entryPrice        Decimal? @db.Decimal(30, 8) @map("entry_price")
  takeProfit        Decimal? @db.Decimal(30, 8) @map("take_profit")
  stopLoss          Decimal? @db.Decimal(30, 8) @map("stop_loss")
  status            String   @db.VarChar(20) // 'WATCHING' | 'TRIGGERED' | 'EXPIRED'
  confidence        Decimal? @db.Decimal(5, 2) // 置信度(0-100)
  reason            String?  @db.Text // 创建原因
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  expiredAt         DateTime? @map("expired_at")
  
  // 关联的信号
  actionableSignals ActionableSignal[]
  
  @@index([symbol, status, createdAt])
  @@index([marketState, riskRewardRatio])
  @@index([status, expiredAt])
  @@map("trading_opportunities")
}

// 可执行信号表
model ActionableSignal {
  id                    String   @id @default(uuid())
  opportunityId         String   @map("opportunity_id")
  signalType            String   @db.VarChar(30) @map("signal_type") // 'STRUCTURE_BREAKOUT' | 'PULLBACK_CONFIRMATION' | 'PATTERN_BREAKOUT'
  triggerPrice          Decimal  @db.Decimal(30, 8) @map("trigger_price")
  entryPrice            Decimal  @db.Decimal(30, 8) @map("entry_price")
  takeProfit            Decimal  @db.Decimal(30, 8) @map("take_profit")
  stopLoss              Decimal  @db.Decimal(30, 8) @map("stop_loss")
  riskRewardRatio       Decimal  @db.Decimal(8, 2) @map("risk_reward_ratio")
  confidence            Decimal  @db.Decimal(5, 2) // 置信度(0-100)
  reason                String   @db.Text // 信号触发原因
  triggeredAt           DateTime @default(now()) @map("triggered_at")
  status                String   @db.VarChar(20) // 'ACTIVE' | 'EXECUTED' | 'EXPIRED'
  executedAt            DateTime? @map("executed_at")
  
  // 关联的交易机会
  opportunity           TradingOpportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  
  @@index([opportunityId, status])
  @@index([signalType, triggeredAt])
  @@index([status, confidence])
  @@map("actionable_signals")
}

// 市场状态记录表
model MarketState {
  id            String   @id @default(uuid())
  symbol        String   @db.VarChar(20)
  timeframe     String   @db.VarChar(10) // 'D1' | 'H4'
  state         String   @db.VarChar(20) // 'UPTREND' | 'DOWNTREND' | 'RANGING'
  ema21         Decimal  @db.Decimal(30, 8) // EMA21值
  ema55         Decimal  @db.Decimal(30, 8) // EMA55值
  currentPrice  Decimal  @db.Decimal(30, 8) @map("current_price")
  confidence    Decimal  @db.Decimal(5, 2) // 置信度(0-100)
  details       String?  @db.Text // 详细分析信息(JSON)
  analyzedAt    DateTime @default(now()) @map("analyzed_at")
  
  @@unique([symbol, timeframe])
  @@index([symbol, timeframe, analyzedAt])
  @@index([state, confidence])
  @@map("market_states")
}

// 支撑阻力位表
model SupportResistanceLevel {
  id          String   @id @default(uuid())
  symbol      String   @db.VarChar(20)
  timeframe   String   @db.VarChar(10) // 'D1' | 'H4'
  levelType   String   @db.VarChar(20) @map("level_type") // 'SUPPORT' | 'RESISTANCE'
  price       Decimal  @db.Decimal(30, 8)
  strength    Decimal  @db.Decimal(5, 2) // 强度评分(0-100)
  touches     Int      @default(1) // 触及次数
  lastTouch   DateTime? @map("last_touch") // 最后触及时间
  isActive    Boolean  @default(true) @map("is_active") // 是否仍然有效
  details     String?  @db.Text // 详细信息(JSON)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  @@unique([symbol, timeframe, price, levelType])
  @@index([symbol, timeframe, levelType])
  @@index([isActive, strength])
  @@map("support_resistance_levels")
}

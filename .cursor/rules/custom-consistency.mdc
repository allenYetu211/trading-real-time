---
alwaysApply: true
description: "项目统一性规则 - 涵盖枚举使用、导入路径、Controller设计、DTO规范等"
---


# 项目统一性规则

## 枚举和类型定义统一性

### 1. 公共枚举使用
- 所有链类型必须使用共享枚举：`import { ChainType } from 'src/shared/enums/chain-type.enum'`
- 禁止在模块内部重复定义相同的枚举类型
- 链类型值统一使用：`solana`, `bsc`, `base`, `vana`, `morph`

### 2. 导入路径统一
- 共享模块使用绝对路径：`src/shared/...`
- 模块内部使用相对路径：`./dto/...`, `../service/...`
- 跨模块引用使用绝对路径：`src/modules/...`

## Controller 统一性

### 1. 验证处理
- 依赖全局 ValidationPipe，不在controller中重复配置
- 不使用 `@UsePipes(new ValidationPipe({ transform: true }))`
- 不使用 `new ValidationPipe({ transform: true })` 在参数装饰器中

### 2. HTTP 响应
- 不使用 `@HttpCode(HttpStatus.OK)` 除非特殊需要（如DELETE操作返回200）
- 依赖全局 TransformInterceptor 处理响应格式
- Controller 方法直接返回业务数据，不手动包装 `{ success, data, message }` 格式

### 3. 查询接口规范
- 复杂查询使用 POST 方法，参数通过 `@Body()` 传递
- 简单查询可使用 GET 方法，参数通过 `@Query()` 传递
- 列表查询统一使用 POST `/xxx/list` 格式

## DTO 设计统一性

### 1. 验证规则
- 所有验证逻辑在 DTO 中完成，使用 class-validator 装饰器
- 错误消息使用中文，格式：`{ message: 'XXX必须是字符串' }`
- 枚举验证使用：`@IsEnum(ChainType, { message: '不支持的链类型' })`

### 2. 参数简化原则
- 更新操作只传递必要参数，其他信息从数据库查询或设置默认值
- 批量操作使用专门的DTO包装，如 `{ items: [...] }` 结构
- 避免传递可推导的冗余信息

## 服务层统一性

### 1. 数据库操作
- 查询不到记录时的处理要一致：查询接口返回空数组，更新接口创建默认记录
- 使用 Prisma 的 upsert 需要谨慎，优先使用明确的 create/update 逻辑
- 批量操作优先使用事务处理

### 2. 错误处理
- 使用统一的错误响应格式
- 依赖全局 HttpExceptionFilter 处理异常

## 命名规范

### 1. 字段命名
- 数据库字段使用下划线：`wallet_address`, `token_address`
- DTO/接口使用驼峰：`walletAddress`, `tokenAddress`
- 保持数据库和API层命名映射的一致性

### 2. 枚举值命名
- 枚举键使用大写：`SOLANA`, `BSC`
- 枚举值使用小写：`'solana'`, `'bsc'`
- 与数据库存储值保持一致

## 文档统一性

### 1. API 文档
- 所有接口提供 Postman 集合和 Markdown 文档
- 示例数据使用有意义的值，不使用 `xxx`, `test123` 等
- 文档与实际接口保持同步

### 2. 代码注释
- Controller 方法必须有中文注释说明功能
- 复杂业务逻辑添加注释解释
- DTO 类添加用途说明
